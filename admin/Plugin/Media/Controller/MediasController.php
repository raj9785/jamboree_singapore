<?phpclass MediasController extends MediaAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Medias';    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(array('field' => 'email', 'type' => 'value'), array('field' => 'firstname', 'type' => 'value'), array('field' => 'username', 'type' => 'value'), array('field' => 'mobile', 'type' => 'value'), array('field' => 'user_role_id', 'type' => 'value'), array('field' => 'status', 'type' => 'value'));    //public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->set('tab_open', 'medias');        $this->loadModel("MediaType");        $cat_list = $this->MediaType->find("list", array('conditions' => array(                'is_active' => 1        )));        $this->set("cat_list", $cat_list);    }    public function index() {        $conditions = array();        $limitValue = $limit = 25;        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->set('page', $page);        if ($this->request->is('get') && !isset($this->request->data['recordsPerPage'])) {            if (!empty($this->request->query)) {                if (isset($this->request->query['is_active']) && $this->request->query['is_active'] != "") {                    array_push($conditions, array('Media.is_active' => $this->request->query['is_active']));                    $this->set("is_active", $this->request->query['is_active']);                }                if (isset($this->request->query['media_type_id']) && $this->request->query['media_type_id'] != "") {                    array_push($conditions, array('Media.media_type_id' => $this->request->query['media_type_id']));                    $this->set("media_type_id", $this->request->query['media_type_id']);                }                if (isset($this->request->query['title']) && $this->request->query['title'] != "") {                    array_push($conditions, array('Media.title LIKE' => "%" . $this->request->query['title'] . "%"));                    $this->set("title", $this->request->query['title']);                }                if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                    array_push($conditions, array('(DATE_FORMAT(Media.created_on, "%Y-%m-%d") >= ? AND DATE_FORMAT(Media.created_on, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));                } else                if (@$this->request->query['from_date']) {                    array_push($conditions, array('DATE_FORMAT(Media.created_on, "%Y-%m-%d") >= ' => $this->request->query['from_date']));                } else                if (@$this->request->query['to_date']) {                    array_push($conditions, array('DATE_FORMAT(Media.created_on, "%Y-%m-%d") <= ' => $this->request->query['to_date']));                }                $this->set("from_date", @$this->request->query['from_date']);                $this->set("to_date", @$this->request->query['to_date']);            }        }        $this->paginate = array(            'conditions' => $conditions,            'limit' => 25,            'order' => array(                'Media.created_on' => 'DESC'            )        );        $this->set('records', $this->paginate('Media'));        $this->set('title_for_layout', 'Medias');    }///$this->{$this->modelClass}->set($data_chk);    public function add() {        if ($this->request->is('post')) {            $this->request->data['Media']['created_on'] = date("Y-m-d H:i:s");            $this->request->data['Media']['is_active'] = 1;            $this->request->data['Media']['media_type_id'] = $this->data['Media']['media_type_id'];            $this->request->data['Media']['title'] = $this->data['Media']['title'];            $is_success = 1;            if ($this->data['Media']['media_type_id'] == 1) {                $this->request->data['Media']['media_url'] = $this->data['Media']['media_url'];            } else {                $upload_image_folder = MEDIA_IMAGE_PATH;                $filename = $this->data{$this->modelClass}['media_url_image']['name'];                if (isset($this->request->data{$this->modelClass}['media_url_image']) && $this->request->data{$this->modelClass}['media_url_image']['name'] != "") {                    $allowed_extensions = array('jpg', 'JPG', 'jpeg', 'png', 'gif');                    $uploaded_image = $this->request->data{$this->modelClass}['media_url_image']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    $uploadimageArray = $this->request->data{$this->modelClass}['media_url_image'];                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    } else {                        if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {                            $file_name = basename($uploadimageArray['name']);                            $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                            $image_name = explode("." . $imgExtension, $file_name);                            $prefix = time() . "~@~";                            $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;                            if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_image_folder . DS . $file_name)) {                                $this->request->data['Media']['media_url'] = $file_name;                            }                        }                    }                    unset($this->request->data{$this->modelClass}['media_url_image']);                } else {                    unset($this->request->data{$this->modelClass}['media_url_image']);                }            }            if ($is_success == 1) {                $check_duplicate = $this->Media->find('count', array(                    'conditions' => array(                        'Media.title' => $this->request->data['Media']['title'],                        'Media.media_type_id' => $this->request->data['Media']['media_type_id'],                    )                ));                if ($check_duplicate == 0) {                    if ($this->Media->save($this->request->data)) {                        $new_id = $this->{$this->modelClass}->id;                        $json_data = json_encode($this->request->data);                        $text_action = "Added";                        $this->global_logs("medias", $new_id, 0, $text_action, $json_data);                        $this->Session->setFlash(__('Media added successfully'), 'success');                        $this->redirect(array('plugin' => 'media', 'controller' => 'medias', 'action' => 'index'));                    }                } else {                    $this->Session->setFlash('Media already exists', 'error');                }            } else {                $this->Session->setFlash(__('Please select media image'), 'error');                $this->redirect(array('plugin' => 'media', 'controller' => 'medias', 'action' => 'index'));            }        }        $this->set('title_for_layout', 'Add New Media');    }    public function edit() {        $user_id = $this->params->query['id'];        $conditions = array(            "Media.id" => $user_id,        );        if (!$user_id || $user_id == NULL) {            $this->Session->setFlash('Invalid request to edit Media', 'error');            $this->redirect(array('plugin' => 'media', 'controller' => 'medias', 'action' => 'index'));        } else {// check that user exists or not            $check_user_exists = $this->Media->Find('count', array('conditions' => $conditions, 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('Media does not exists', 'error');                $this->redirect(array('plugin' => 'media', 'controller' => 'medias', 'action' => 'index'));            }        }        $users_data = $this->Media->find('first', array('conditions' => $conditions));        $this->set('users_data', $users_data);        if ($this->request->is('post') || $this->request->is('put')) {            $is_success = 1;            if ($users_data['Media']['media_type_id'] == 1) {                $this->request->data['Media']['media_url'] = $this->data['Media']['media_url'];            } else {                $upload_image_folder = MEDIA_IMAGE_PATH;                $filename = $this->data{$this->modelClass}['media_url_image']['name'];                if (isset($this->request->data{$this->modelClass}['media_url_image']) && $this->request->data{$this->modelClass}['media_url_image']['name'] != "") {                    $this->request->data['Media']['media_url'] = $users_data['Media']['media_url'];                    $allowed_extensions = array('jpg', 'JPG', 'jpeg', 'png', 'gif');                    $uploaded_image = $this->request->data{$this->modelClass}['media_url_image']['name'];                    $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                    $uploadimageArray = $this->request->data{$this->modelClass}['media_url_image'];                    if (!in_array($imgExtension, $allowed_extensions)) {                        $this->data = $this->request->data;                        $is_success = 0;                        $this->Session->setFlash(__('Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                    } else {                        if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {                            $file_name = basename($uploadimageArray['name']);                            $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                            $image_name = explode("." . $imgExtension, $file_name);                            $prefix = time() . "~@~";                            $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;                            if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_image_folder . DS . $file_name)) {                                $this->request->data['Media']['media_url'] = $file_name;                                $image = $users_data['Media']['media_url'];                                if ($image) {                                    if (file_exists(MEDIA_IMAGE_PATH . $image)) {                                        @unlink(MEDIA_IMAGE_PATH . $image);                                    }                                }                            }                        }                    }                    unset($this->request->data{$this->modelClass}['media_url_image']);                } else {                    $this->request->data['Media']['media_url'] = $users_data['Media']['media_url'];                    unset($this->request->data{$this->modelClass}['media_url_image']);                }            }            $check_duplicate = $this->Media->find('count', array(                'conditions' => array(                    'Media.title' => $this->request->data['Media']['title'],                    'Media.media_type_id' => $this->request->data['Media']['media_type_id'],                    'Media.id !=' => $user_id                )            ));            if ($check_duplicate == 0) {                if ($this->Media->save($this->request->data)) {                    $json_data = json_encode($this->request->data);                    $text_action = "updated";                    $this->global_logs("medias", $user_id, 1, $text_action, $json_data);                    $this->Session->setFlash(__('Media updated successfully'), 'success');                    $this->redirect(array('plugin' => 'media', 'controller' => 'medias', 'action' => 'index'));                } else {                    $this->Session->setFlash('Media couldn\'t be updated, try again later', 'error');                }            } else {                $this->Session->setFlash('Media already exists', 'error');            }        } else {            $this->data = $users_data;        }        $this->set('title_for_layout', 'Update Media');    }    public function status_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                if ($all_data[$this->modelClass]['is_active'] == 1) {                    $new_value = 0;                    $data['is_active'] = 0;                    $status = 3;                    $text_action = " inactivated";                } else {                    $new_value = 1;                    $data['is_active'] = 1;                    $status = 2;                    $text_action = " activated";                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $json_data = json_encode($data);                $this->global_logs("medias", $this->data['id'], $status, $text_action, $json_data);                echo 1;            }        }        exit;    }}