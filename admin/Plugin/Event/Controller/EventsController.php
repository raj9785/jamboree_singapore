<?phpclass EventsController extends EventAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Events';    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(array('field' => 'email', 'type' => 'value'), array('field' => 'firstname', 'type' => 'value'), array('field' => 'username', 'type' => 'value'), array('field' => 'mobile', 'type' => 'value'), array('field' => 'user_role_id', 'type' => 'value'), array('field' => 'status', 'type' => 'value'));    //public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->set('tab_open', 'events');    }    public function index() {        $conditions = array();        $conditions = array();        $limitValue = $limit = 25;        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->set('page', $page);        if ($this->request->is('get') && !isset($this->request->data['recordsPerPage'])) {            if (!empty($this->request->query)) {                if (isset($this->request->query['is_active']) && $this->request->query['is_active'] != "") {                    array_push($conditions, array('Event.is_active' => $this->request->query['is_active']));                    $this->set("is_active", $this->request->query['is_active']);                }                if (isset($this->request->query['title']) && $this->request->query['title'] != "") {                    array_push($conditions, array('Event.title LIKE' => "%" . $this->request->query['title'] . "%"));                    $this->set("title", $this->request->query['title']);                }                if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                    array_push($conditions, array('(DATE_FORMAT(Event.created_on, "%Y-%m-%d") >= ? AND DATE_FORMAT(Event.created_on, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));                } else                if (@$this->request->query['from_date']) {                    array_push($conditions, array('DATE_FORMAT(Event.created_on, "%Y-%m-%d") >= ' => $this->request->query['from_date']));                } else                if (@$this->request->query['to_date']) {                    array_push($conditions, array('DATE_FORMAT(Event.created_on, "%Y-%m-%d") <= ' => $this->request->query['to_date']));                }                $this->set("from_date", @$this->request->query['from_date']);                $this->set("to_date", @$this->request->query['to_date']);            }        }        $this->paginate = array(            'conditions' => $conditions,            'limit' => 25,            'order' => array(                'Event.created_on' => 'DESC'            )        );        $this->set('records', $this->paginate('Event'));        $this->set('title_for_layout', 'Events');    }    public function add() {        if ($this->request->is('post')) {            $this->request->data['Event']['created_on'] = date("Y-m-d H:i:s");            $this->request->data['Event']['is_active'] = 1;            $this->request->data['Event']['event_sdate'] = $this->data['Event']['event_date'] . " " . $this->data['Event']['event_start_time'];            $this->request->data['Event']['event_edate'] = $this->data['Event']['event_date'] . " " . $this->data['Event']['event_end_time'];            //pr($this->request->data);exit;            if ($this->Event->save($this->request->data)) {                $new_id = $this->{$this->modelClass}->id;                $json_data = json_encode($this->request->data);                $text_action = "received";                $this->global_logs("events", $new_id, 0, $text_action, $json_data);                $PropertyImage = @$this->data['EventImage']['image'];                //pr($PropertyImage);exit;                if (!empty($PropertyImage)) {                    $this->loadModel("EventImage");                    $insArr = array();                    $j = 0;                    foreach ($PropertyImage as $images) {                        $img = $images;                        if (!empty($img)) {                            if ($img['name']) {                                $upload_image_folder = EVENT_IMAGE_PATH;                                $allowed_extensions = array('jpg', 'JPG', 'jpeg', 'PNG', 'png');                                $uploaded_image = $img['name'];                                $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                                if (!in_array($imgExtension, $allowed_extensions)) {                                    $this->Session->setFlash(__('Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                                } else {                                    $file_name = basename($img['name']);                                    $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                                    $image_name = explode("." . $imgExtension, $file_name);                                    $prefix = time() . "~@~";                                    $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;                                    if (move_uploaded_file($img['tmp_name'], $upload_image_folder . DS . $file_name)) {                                        $insArr['EventImage'][$j]['event_id'] = $new_id;                                        $insArr['EventImage'][$j]['image'] = $file_name;                                        $insArr['EventImage'][$j]['created_on'] = date("Y-m-d H:i:s");                                        $j++;                                    }                                }                            }                        }                    }                    //pr($insArr);exit;                    if (!empty($insArr)) {                        $this->EventImage->saveAll($insArr['EventImage']);                    }                }                //ends//                $this->Session->setFlash(__('Event added successfully'), 'success');                $this->redirect(array('plugin' => 'event', 'controller' => 'events', 'action' => 'index'));            }        }        $this->set('title_for_layout', 'Add New Event');    }    public function edit() {//        echo ini_get('upload_max_filesize') . '<br/>';//        ini_set("upload_max_filesize", "300M");//        echo ini_get("upload_max_filesize");        $user_id = $this->params->query['id'];        $conditions = array(            "Event.id" => $user_id,        );        if (!$user_id || $user_id == NULL) {            $this->Session->setFlash('Invalid request to edit Event', 'error');            $this->redirect(array('plugin' => 'event', 'controller' => 'events', 'action' => 'index'));        } else {// check that user exists or not            $check_user_exists = $this->Event->Find('count', array('conditions' => $conditions, 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('Event does not exists', 'error');                $this->redirect(array('plugin' => 'event', 'controller' => 'events', 'action' => 'index'));            }        }        $users_data = $this->Event->find('first', array('conditions' => $conditions));        $this->set('users_data', $users_data);        if ($this->request->is('post') || $this->request->is('put')) {            //pr($this->data);exit;            $this->request->data['Event']['event_sdate'] = $this->data['Event']['event_date'] . " " . $this->data['Event']['event_start_time'];            $this->request->data['Event']['event_edate'] = $this->data['Event']['event_date'] . " " . $this->data['Event']['event_end_time'];            if ($this->Event->save($this->request->data)) {                $json_data = json_encode($this->request->data);                $text_action = "updated";                $this->global_logs("events", $user_id, 1, $text_action, $json_data);                $PropertyImage = @$this->data['EventImage']['image'];                pr($PropertyImage);                $inipath = php_ini_loaded_file();                if ($inipath) {                    echo 'Loaded php.ini: ' . $inipath;                } else {                    echo 'A php.ini file is not loaded';                }                if (!empty($PropertyImage)) {                    $this->loadModel("EventImage");                    $insArr = array();                    $j = 0;                    foreach ($PropertyImage as $images) {                        $img = $images;                        if (!empty($img)) {                            if ($img['name']) {                                $upload_image_folder = EVENT_IMAGE_PATH;                                $allowed_extensions = array('jpg', 'JPG', 'jpeg', 'PNG', 'png');                                $uploaded_image = $img['name'];                                $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                                                                if (!in_array($imgExtension, $allowed_extensions)) {                                    $this->Session->setFlash(__('Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                                } else {                                    $file_name = basename($img['name']);                                    $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                                    $image_name = explode("." . $imgExtension, $file_name);                                    $prefix = time() . "~@~";                                    $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;                                    if (move_uploaded_file($img['tmp_name'], $upload_image_folder . DS . $file_name)) {                                        $insArr['EventImage'][$j]['event_id'] = $user_id;                                        $insArr['EventImage'][$j]['image'] = $file_name;                                        $insArr['EventImage'][$j]['created_on'] = date("Y-m-d H:i:s");                                        $j++;                                    }                                }                            }                        }                    }                    //pr($insArr);exit;                    if (!empty($insArr)) {                        $this->EventImage->saveAll($insArr['EventImage']);                    }                }                //ends//                $this->Session->setFlash(__('Event updated successfully'), 'success');                $this->redirect(array('plugin' => 'event', 'controller' => 'events', 'action' => 'index'));            } else {                $this->Session->setFlash('Event couldn\'t be updated, try again later', 'error');            }        } else {            $users_data['Event']['event_date'] = date("Y-m-d", strtotime($users_data['Event']['event_sdate']));            $users_data['Event']['event_start_time'] = date("H:i", strtotime($users_data['Event']['event_sdate']));            $users_data['Event']['event_end_time'] = date("H:i", strtotime($users_data['Event']['event_edate']));            $this->data = $users_data;        }        $this->set('title_for_layout', 'Update Event');    }    public function status_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                if ($all_data[$this->modelClass]['is_active'] == 1) {                    $new_value = 0;                    $data['is_active'] = 0;                    $status = 3;                    $text_action = " inactivated";                } else {                    $new_value = 1;                    $data['is_active'] = 1;                    $status = 2;                    $text_action = " activated";                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $json_data = json_encode($data);                $this->global_logs("events", $this->data['id'], $status, $text_action, $json_data);                echo 1;            }        }        exit;    }    function remove_image() {        $this->autoLayout = false;        $this->autoRender = false;        $this->loadModel("EventImage");        $image_id = $this->request->data('image_id');        if ($this->request->is('ajax')) {            $findData = $this->EventImage->find('first', array('conditions' => array('EventImage.id' => $image_id)));            if (!empty($findData)) {                $image = $findData['EventImage']['image'];                $this->EventImage->delete($image_id);                @unlink(EVENT_IMAGE_PATH . $image);            }        }        echo true;        exit;    }}