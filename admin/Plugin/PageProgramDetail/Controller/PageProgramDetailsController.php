<?phpclass PageProgramDetailsController extends PageProgramDetailAppController {    /**     * Controller name     *     * @var string     */    var $name = 'PageProgramDetails';    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(array('field' => 'email', 'type' => 'value'), array('field' => 'firstname', 'type' => 'value'), array('field' => 'username', 'type' => 'value'), array('field' => 'mobile', 'type' => 'value'), array('field' => 'user_role_id', 'type' => 'value'), array('field' => 'status', 'type' => 'value'));    //public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->set('tab_open', 'cms');    }    public function index($page_id = '') {        $this->loadModel('Page');        $page_details = $this->Page->find('first', array(            'conditions' => array(                'Page.id' => $page_id,            ),            'fields' => array('title'),        ));        if (!empty($page_details)) {            $this->set('page_details', $page_details);            $conditions = array('page_id'=>$page_id);            $limitValue = $limit = 25;            $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);            $this->set('limitValue', $limitValue);            $this->set('limit', $limit);            $this->set('page', $page);            $this->set('page_id', $page_id);            $this->paginate = array(                'conditions' => $conditions,                'limit' => 25,                'order' => array(                    'PageProgramDetail.created_on' => 'DESC'                )            );            $this->set('records', $this->paginate('PageProgramDetail'));            $this->set('title_for_layout', 'Program Details : '.$page_details['Page']['title']);        } else {            $this->Session->setFlash('Invalid request', 'error');            $this->redirect(array('plugin' => false, 'controller' => 'pages', 'action' => 'index'));        }    }    public function add($page_id) {        $this->set('page_id', $page_id);        if ($this->request->is('post')) {            $this->request->data['PageProgramDetail']['created_on'] = date("Y-m-d H:i:s");            $this->request->data['PageProgramDetail']['is_active'] = 1;            $this->request->data['PageProgramDetail']['page_id'] = $page_id;            $this->request->data['PageProgramDetail']['alt_text'] = $this->data['PageProgramDetail']['alt_text'];            $is_success = 1;            $upload_image_folder = PAGE_ICON_PATH;            $filename = $this->data{$this->modelClass}['image']['name'];            if (isset($this->request->data{$this->modelClass}['image']) && $this->request->data{$this->modelClass}['image']['name'] != "") {                $allowed_extensions = array('jpg', 'JPG', 'jpeg', 'png', 'gif');                $uploaded_image = $this->request->data{$this->modelClass}['image']['name'];                $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                if (!in_array($imgExtension, $allowed_extensions)) {                    $this->data = $this->request->data;                    $is_success = 0;                    $this->Session->setFlash(__('Driver Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                }                $uploadimageArray = $this->request->data{$this->modelClass}['image'];                unset($this->request->data{$this->modelClass}['image']);            } else {                unset($this->request->data{$this->modelClass}['image']);            }            if ($is_success == 1) {                // pr($this->request->data);                if ($this->PageProgramDetail->save($this->request->data)) {                    $new_id = $this->{$this->modelClass}->id;                    $json_data = json_encode($this->request->data);                    $text_action = "Added";                    $this->global_logs("page_program_details", $new_id, 0, $text_action, $json_data);                    if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {                        $file_name = basename($uploadimageArray['name']);                        $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                        $image_name = explode("." . $imgExtension, $file_name);                        $prefix = time() . "~@~";                        $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;                        if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_image_folder . DS . $file_name)) {                            $this->{$this->modelClass}->updateAll(array('PageProgramDetail.image' => "'" . $file_name . "'"), array('PageProgramDetail.id' => $new_id));                        }                    }                    $this->Session->setFlash(__('Program Detail added successfully'), 'success');                    $this->redirect(array('plugin' => 'page_program_detail', 'controller' => 'page_program_details', 'action' => 'index', $page_id));                }            } else {                $this->Session->setFlash(__('Please upload image'), 'error');            }        }        $this->set('title_for_layout', 'Add New Program Detail');    }    public function edit() {        $user_id = $this->params->query['id'];        $page_id = $this->params->query['page_id'];        $this->set('page_id', $page_id);        $conditions = array(            "PageProgramDetail.id" => $user_id,        );        if (!$user_id || $user_id == NULL) {            $this->Session->setFlash('Invalid request to edit', 'error');            $this->redirect(array('plugin' => 'page_program_detail', 'controller' => 'page_program_details', 'action' => 'index', $page_id));        } else {// check that user exists or not            $check_user_exists = $this->PageProgramDetail->Find('count', array('conditions' => $conditions, 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('Blog does not exists', 'error');                $this->redirect(array('plugin' => 'page_program_detail', 'controller' => 'page_program_details', 'action' => 'index', $page_id));            }        }        $users_data = $this->PageProgramDetail->find('first', array('conditions' => $conditions));        $this->set('users_data', $users_data);        if ($this->request->is('post') || $this->request->is('put')) {            $is_success = 1;            $upload_image_folder = PAGE_ICON_PATH;            $filename = $this->data{$this->modelClass}['image']['name'];            if (isset($this->request->data{$this->modelClass}['image']) && $this->request->data{$this->modelClass}['image']['name'] != "") {                $allowed_extensions = array('jpg', 'JPG', 'jpeg', 'png', 'gif');                $uploaded_image = $this->request->data{$this->modelClass}['image']['name'];                $imgExtension = pathinfo($uploaded_image, PATHINFO_EXTENSION);                if (!in_array($imgExtension, $allowed_extensions)) {                    $this->data = $this->request->data;                    $is_success = 0;                    $this->Session->setFlash(__('Image extension should be of ' . implode(",", $allowed_extensions) . ' only'), 'error');                }                $uploadimageArray = $this->request->data{$this->modelClass}['image'];                unset($this->request->data{$this->modelClass}['image']);            } else {                unset($this->request->data{$this->modelClass}['image']);            }            if ($is_success == 1) {                if ($this->PageProgramDetail->save($this->request->data)) {                    $json_data = json_encode($this->request->data);                    $text_action = "updated";                    $this->global_logs("page_program_details", $user_id, 1, $text_action, $json_data);                    if (isset($uploadimageArray) && $uploadimageArray['name'] != "") {                        $file_name = basename($uploadimageArray['name']);                        $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                        $image_name = explode("." . $imgExtension, $file_name);                        $prefix = time() . rand(0, 99) . "~@~";                        $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;                        if (move_uploaded_file($uploadimageArray['tmp_name'], $upload_image_folder . DS . $file_name)) {                            $this->{$this->modelClass}->updateAll(array('PageProgramDetail.image' => "'" . $file_name . "'"), array('PageProgramDetail.id' => $user_id));                            $image = $users_data['PageProgramDetail']['image'];                            if ($image) {                                if (file_exists(PAGE_ICON_PATH . $image)) {                                    @unlink(PAGE_ICON_PATH . $image);                                }                            }                        }                    }                    $this->Session->setFlash(__('Program Detail updated successfully'), 'success');                    $this->redirect(array('plugin' => 'page_program_detail', 'controller' => 'page_program_details', 'action' => 'index', $page_id));                } else {                    $this->Session->setFlash('Program Detail couldn\'t be updated, try again later', 'error');                }            } else {                $this->Session->setFlash('Program Detail couldn\'t be updated, try again later', 'error');            }        } else {            $this->data = $users_data;        }        $this->set('title_for_layout', 'Update Program Detail');    }    public function status_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                if ($all_data[$this->modelClass]['is_active'] == 1) {                    $new_value = 0;                    $data['is_active'] = 0;                    $status = 3;                    $text_action = " inactivated";                } else {                    $new_value = 1;                    $data['is_active'] = 1;                    $status = 2;                    $text_action = " activated";                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $json_data = json_encode($data);                $this->global_logs("blogs", $this->data['id'], $status, $text_action, $json_data);                echo 1;            }        }        exit;    }}