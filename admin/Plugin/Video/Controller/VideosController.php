<?phpclass VideosController extends VideoAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Videos';    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(array('field' => 'email', 'type' => 'value'), array('field' => 'firstname', 'type' => 'value'), array('field' => 'username', 'type' => 'value'), array('field' => 'mobile', 'type' => 'value'), array('field' => 'user_role_id', 'type' => 'value'), array('field' => 'status', 'type' => 'value'));    //public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);        $this->set('tab_open', 'videos');        $this->loadModel("Course");        $cat_list = $this->Course->find("list", array(            'conditions' => array(                'is_active' => 1            ), //'order' => array("name" => "ASC"),                )        );        $this->set("cat_list", $cat_list);    }    public function index() {        $conditions = array();        $limitValue = $limit = 25;        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $this->set('limitValue', $limitValue);        $video_category_id = @$this->request->query['video_category_id'] ? @$this->request->query['video_category_id'] : 3;        $title = @$this->request->query['title'] ? @$this->request->query['title'] : "";        $this->set('limit', $limit);        $this->set('page', $page);        $conditions = array('video_category_id' => $video_category_id);        if ($this->request->is('get') && !isset($this->request->data['recordsPerPage'])) {            if (!empty($this->request->query)) {                if (isset($this->request->query['course_id']) && $this->request->query['course_id'] != "") {                    array_push($conditions, array('Video.course_id' => $this->request->query['course_id']));                    $this->set("course_id", $this->request->query['course_id']);                }                if (isset($this->request->query['is_active']) && $this->request->query['is_active'] != "") {                    array_push($conditions, array('Video.is_active' => $this->request->query['is_active']));                    $this->set("is_active", $this->request->query['is_active']);                }                if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                    array_push($conditions, array('(DATE_FORMAT(Video.created_on, "%Y-%m-%d") >= ? AND DATE_FORMAT(Video.created_on, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));                } else                if (@$this->request->query['from_date']) {                    array_push($conditions, array('DATE_FORMAT(Video.created_on, "%Y-%m-%d") >= ' => $this->request->query['from_date']));                } else                if (@$this->request->query['to_date']) {                    array_push($conditions, array('DATE_FORMAT(Video.created_on, "%Y-%m-%d") <= ' => $this->request->query['to_date']));                }                $this->set("from_date", @$this->request->query['from_date']);                $this->set("to_date", @$this->request->query['to_date']);            }        }        $this->paginate = array(            'conditions' => $conditions,            'limit' => 25,            'order' => array(                'Video.created_on' => 'DESC'            )        );        $this->set('records', $this->paginate('Video'));        $this->set('title_for_layout', $title);        $this->set('title', $title);        $this->set('video_category_id', $video_category_id);    }    public function add() {        $video_category_id = @$this->request->query['video_category_id'] ? @$this->request->query['video_category_id'] : 3;        $title = @$this->request->query['title'] ? $this->request->query['title'] : "";        $this->set('title', $title);        $this->set('video_category_id', $video_category_id);        if ($this->request->is('post')) {            $this->request->data['Video']['created_on'] = date("Y-m-d H:i:s");            $this->request->data['Video']['is_active'] = 1;            $this->request->data['Video']['video_category_id'] = $video_category_id;            $check_duplicate = $this->Video->find('count', array(                'conditions' => array(                    'Video.you_tube_url' => $this->request->data['Video']['you_tube_url'],                    'Video.video_category_id' => $this->request->data['Video']['video_category_id'],                )            ));            if ($check_duplicate == 0) {                if ($this->Video->save($this->request->data)) {                    $new_id = $this->{$this->modelClass}->id;                    $json_data = json_encode($this->request->data);                    $text_action = "Added";                    $this->global_logs("videos", $new_id, 0, $text_action, $json_data);                    $this->Session->setFlash(__('Video added successfully'), 'success');                    $this->redirect(array('plugin' => 'video', 'controller' => 'videos', 'action' => 'index', '?' => array("video_category_id" => $video_category_id, 'title' => $title)));                }            } else {                $this->Session->setFlash('Video already exists', 'error');            }        }        $this->set('title_for_layout', 'Add New Video');    }    public function edit() {        $video_category_id = @$this->request->query['video_category_id'] ? @$this->request->query['video_category_id'] : 3;        $title = @$this->request->query['title'] ? @$this->request->query['title'] : "";        $this->set('title', $title);        $this->set('video_category_id', $video_category_id);        $user_id = $this->params->query['id'];        $conditions = array(            "Video.id" => $user_id,        );        if (!$user_id || $user_id == NULL) {            $this->Session->setFlash('Invalid request to edit Video', 'error');            $this->redirect(array('plugin' => 'video', 'controller' => 'videos', 'action' => 'index', '?' => array("video_category_id" => $video_category_id, 'title' => $title)));        } else {// check that user exists or not            $check_user_exists = $this->Video->Find('count', array('conditions' => $conditions, 'recursive' => -1));            if ($check_user_exists == 0) {                $this->Session->setFlash('Video does not exists', 'error');                $this->redirect(array('plugin' => 'video', 'controller' => 'videos', 'action' => 'index', '?' => array("video_category_id" => $video_category_id, 'title' => $title)));            }        }        $users_data = $this->Video->find('first', array('conditions' => $conditions));        $this->set('users_data', $users_data);        if ($this->request->is('post') || $this->request->is('put')) {            $this->request->data['Video']['video_category_id'] = $video_category_id;            $check_duplicate = $this->Video->find('count', array(                'conditions' => array(                    'Video.you_tube_url' => $this->request->data['Video']['you_tube_url'],                    'Video.video_category_id' => $this->request->data['Video']['video_category_id'],                    'Video.id !=' => $user_id                )            ));            if ($check_duplicate == 0) {                if ($this->Video->save($this->request->data)) {                    $json_data = json_encode($this->request->data);                    $text_action = "updated";                    $this->global_logs("videos", $user_id, 1, $text_action, $json_data);                    $this->Session->setFlash(__('Video updated successfully'), 'success');                    $this->redirect(array('plugin' => 'video', 'controller' => 'videos', 'action' => 'index', '?' => array("video_category_id" => $video_category_id, 'title' => $title)));                } else {                    $this->Session->setFlash('Video couldn\'t be updated, try again later', 'error');                }            } else {                $this->Session->setFlash('Video already exists', 'error');            }        } else {            $this->data = $users_data;        }        $this->set('title_for_layout', 'Update Video');    }    public function status_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                if ($all_data[$this->modelClass]['is_active'] == 1) {                    $new_value = 0;                    $data['is_active'] = 0;                    $status = 3;                    $text_action = " inactivated";                } else {                    $new_value = 1;                    $data['is_active'] = 1;                    $status = 2;                    $text_action = " activated";                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $json_data = json_encode($data);                $this->global_logs("videos", $this->data['id'], $status, $text_action, $json_data);                echo 1;            }        }        exit;    }    public function home_status_ajax() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $all_data = $this->{$this->modelClass}->findById($this->data['id']);                if ($all_data[$this->modelClass]['show_on_home'] == 1) {                    $new_value = 0;                    $data['show_on_home'] = 0;                    $status = 3;                    $text_action = " inactivated";                } else {                    $new_value = 1;                    $data['show_on_home'] = 1;                    $status = 2;                    $text_action = " activated";                }                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $json_data = json_encode($data);                $this->global_logs("videos", $this->data['id'], $status, $text_action, $json_data);                echo 1;            }        }        exit;    }}